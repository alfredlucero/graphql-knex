/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ParentAccountsSearchInput: { // input type
    afterKey?: number | null; // Int
    beforeKey?: number | null; // Int
    email?: string | null; // String
    limit?: number | null; // Int
    userId?: number | null; // Int
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  PageInfo: { // root type
    afterKey?: number | null; // Int
    beforeKey?: number | null; // Int
    limit?: number | null; // Int
  }
  ParentAccount: { // root type
    createdAt?: string | null; // String
    package: string; // String!
    status: string; // String!
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountMinimal: { // root type
    createdAt?: string | null; // String
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountsSearch: { // root type
    result: NexusGenRootTypes['ParentAccountsSearchResult']; // ParentAccountsSearchResult!
  }
  ParentAccountsSearchData: { // root type
    createdAt?: string | null; // String
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountsSearchResult: { // root type
    data: NexusGenRootTypes['ParentAccountsSearchData'][]; // [ParentAccountsSearchData!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  PageInfo: { // field return type
    afterKey: number | null; // Int
    beforeKey: number | null; // Int
    limit: number | null; // Int
  }
  ParentAccount: { // field return type
    createdAt: string | null; // String
    package: string; // String!
    status: string; // String!
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountMinimal: { // field return type
    createdAt: string | null; // String
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountsSearch: { // field return type
    result: NexusGenRootTypes['ParentAccountsSearchResult']; // ParentAccountsSearchResult!
  }
  ParentAccountsSearchData: { // field return type
    createdAt: string | null; // String
    userId: number; // Int!
    username: string; // String!
  }
  ParentAccountsSearchResult: { // field return type
    data: NexusGenRootTypes['ParentAccountsSearchData'][]; // [ParentAccountsSearchData!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  Query: { // field return type
    getParentAccounts: NexusGenRootTypes['ParentAccountsSearch']; // ParentAccountsSearch!
    parentAccounts: NexusGenRootTypes['ParentAccount'][]; // [ParentAccount!]!
    parentAccountsMinimal: NexusGenRootTypes['ParentAccountMinimal'][]; // [ParentAccountMinimal!]!
  }
}

export interface NexusGenFieldTypeNames {
  PageInfo: { // field return type name
    afterKey: 'Int'
    beforeKey: 'Int'
    limit: 'Int'
  }
  ParentAccount: { // field return type name
    createdAt: 'String'
    package: 'String'
    status: 'String'
    userId: 'Int'
    username: 'String'
  }
  ParentAccountMinimal: { // field return type name
    createdAt: 'String'
    userId: 'Int'
    username: 'String'
  }
  ParentAccountsSearch: { // field return type name
    result: 'ParentAccountsSearchResult'
  }
  ParentAccountsSearchData: { // field return type name
    createdAt: 'String'
    userId: 'Int'
    username: 'String'
  }
  ParentAccountsSearchResult: { // field return type name
    data: 'ParentAccountsSearchData'
    pageInfo: 'PageInfo'
  }
  Query: { // field return type name
    getParentAccounts: 'ParentAccountsSearch'
    parentAccounts: 'ParentAccount'
    parentAccountsMinimal: 'ParentAccountMinimal'
  }
}

export interface NexusGenArgTypes {
  Query: {
    getParentAccounts: { // args
      searchInput?: NexusGenInputs['ParentAccountsSearchInput'] | null; // ParentAccountsSearchInput
    }
    parentAccounts: { // args
      email?: string | null; // String
      userId?: number | null; // Int
      username?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}